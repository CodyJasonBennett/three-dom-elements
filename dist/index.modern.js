import{Mesh as e,PlaneGeometry as t,MeshBasicMaterial as s,NoBlending as i,DoubleSide as h,Vector3 as n,Box3 as d,PerspectiveCamera as a,Scene as r}from"three";import{CSS3DObject as o,CSS3DRenderer as c}from"three/examples/jsm/renderers/CSS3DRenderer";const m=100;class l extends e{constructor(e,a,{elementWidth:r=768,width:c=1,height:m=.75}={}){super(new t(c,m),new s({opacity:0,blending:i,side:h})),this.context=e,this.domElement=a,this.aspectRatio=m/c,this.elementWidth=r,this.elementHeight=this.elementWidth*this.aspectRatio,this.width=c,this.height=m,this.resizeElement(),this.cssObject=new o(this.domElement),this.cssObject.scale.multiplyScalar(100/(this.elementWidth/this.width)),this.size=new n,this.box=new d,this.addEventListener("added",this.handleAdded),this.addEventListener("removed",this.handleRemoved),this.update=this.update.bind(this)}handleAdded(){this.context.cssScene.add(this.cssObject)}handleRemoved(){this.context.cssScene.remove(this.cssObject)}resizeElement(){this.domElement.style.width=`${this.elementWidth}px`,this.domElement.style.height=`${this.elementHeight}px`}setElement(e){this.domElement.parentNode&&this.domElement.parentNode.removeChild(this.domElement),this.domElement=e,this.cssObject.element=e,this.resizeElement()}update(){this.updateMatrixWorld(),this.matrixWorld.decompose(this.position,this.quaternion,this.scale),this.cssObject.quaternion.copy(this.quaternion),this.cssObject.position.copy(this.position).multiplyScalar(100),this.box.setFromObject(this).getSize(this.size),this.cssObject.scale.multiplyScalar(100/(this.elementWidth/(this.size.x*this.scale.x))),this.cssObject.visible=this.visible}dispose(){this.removeEventListener("added",this.handleAdded),this.removeEventListener("removed",this.handleRemoved),this.domElement.remove(),this.geometry.dispose(),this.material.dispose()}}class p{constructor(e){this.enabled=!0,this.cssRenderer=new c,this.domElement=this.cssRenderer.domElement,this.cssCamera=new a(e.fov,e.aspect,100*e.near,100*e.far),this.camera=e,this.cssScene=new r,this.update=this.update.bind(this)}setSize(e,t){this.cssRenderer.setSize(e,t),this.cssCamera.aspect=e/t,this.cssCamera.updateProjectionMatrix()}update(){this.cssCamera.quaternion.copy(this.camera.quaternion),this.cssCamera.position.copy(this.camera.position).multiplyScalar(100),this.enabled&&this.cssScene.traverse(e=>{e.update&&e.update()}),this.cssRenderer.render(this.cssScene,this.cssCamera)}}export{p as DOMContext,l as DOMElement,m as cssFactor};
//# sourceMappingURL=index.modern.js.map
