{"version":3,"file":"index.modern.js","sources":["../src/renderers/DOMContext.js","../src/constants.js","../src/objects/DOMElement.js"],"sourcesContent":["import { PerspectiveCamera, Scene } from 'three';\r\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer.js';\r\nimport { cssFactor } from '../constants.js';\r\n\r\n/**\r\n * A DOM context instance\r\n */\r\nclass DOMContext {\r\n  /**\r\n   * Creates a DOM context instance\r\n   * @param {PerspectiveCamera} camera A perspective camera instance to draw from\r\n   */\r\n  constructor(camera) {\r\n    this.enabled = true;\r\n\r\n    this.cssRenderer = new CSS3DRenderer();\r\n    this.domElement = this.cssRenderer.domElement;\r\n\r\n    this.cssCamera = new PerspectiveCamera(\r\n      camera.fov,\r\n      camera.aspect,\r\n      camera.near * cssFactor,\r\n      camera.far * cssFactor\r\n    );\r\n    this.camera = camera;\r\n\r\n    this.cssScene = new Scene();\r\n\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Resizes the DOM context's renderer and camera\r\n   * @param {number} width Target width\r\n   * @param {number} height Target height\r\n   */\r\n  setSize(width, height) {\r\n    this.cssRenderer.setSize(width, height);\r\n    this.cssCamera.aspect = width / height;\r\n    this.cssCamera.updateProjectionMatrix();\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM context's renderer and camera states\r\n   */\r\n  update() {\r\n    this.cssCamera.quaternion.copy(this.camera.quaternion);\r\n    this.cssCamera.position.copy(this.camera.position).multiplyScalar(cssFactor);\r\n\r\n    if (this.enabled) {\r\n      this.cssScene.traverse(child => {\r\n        if (!child.update) return;\r\n\r\n        child.update();\r\n      });\r\n    }\r\n\r\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\r\n  }\r\n}\r\n\r\nexport default DOMContext;\r\n","/**\r\n * Useful for projecting to scale high-resolution DOM elements\r\n */\r\nexport const cssFactor = 100;\r\n","import {\r\n  Mesh,\r\n  PlaneGeometry,\r\n  MeshBasicMaterial,\r\n  NoBlending,\r\n  DoubleSide,\r\n} from 'three';\r\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer.js';\r\nimport DOMContext from '../renderers/DOMContext.js';\r\nimport { cssFactor } from '../constants.js';\r\n\r\n/**\r\n * DOM element that is projected into 3D space\r\n */\r\nclass DOMElement extends Mesh {\r\n  /**\r\n   * Creates a DOM element that is projected into 3D space\r\n   * @param {DOMContext} context A DOM context instance to draw on\r\n   * @param {HTMLElement} domElement A DOM element to project\r\n   * @param {Object} [options] DOM element options\r\n   * @param {number} [options.elementWidth=768] DOM element width\r\n   * @param {number} [options.width=1] 3D plane width\r\n   * @param {number} [options.height=0.75] 3D plane height\r\n   */\r\n  constructor(\r\n    context,\r\n    domElement,\r\n    options\r\n  ) {\r\n    const { elementWidth = 768, width = 1, height = 0.75 } = options || {};\r\n\r\n    const geometry = new PlaneGeometry(width, height);\r\n    const material = new MeshBasicMaterial({\r\n      opacity: 0,\r\n      color: 0xffffff,\r\n      blending: NoBlending,\r\n      side: DoubleSide,\r\n    });\r\n\r\n    super(geometry, material);\r\n\r\n    this.domElement = domElement;\r\n    this.aspectRatio = height / width;\r\n    this.elementWidth = elementWidth;\r\n    this.elementHeight = this.elementWidth * this.aspectRatio;\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    this.resizeDomElement();\r\n\r\n    this.cssObject = new CSS3DObject(this.domElement);\r\n    this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\r\n\r\n    this.addEventListener('added', () => context.cssScene.add(this.cssObject));\r\n    this.addEventListener('removed', () => context.cssScene.remove(this.cssObject));\r\n\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Resizes DOM element to sync with projection\r\n   */\r\n  resizeDomElement() {\r\n    this.domElement.style.width = `${this.elementWidth}px`;\r\n    this.domElement.style.height = `${this.elementHeight}px`;\r\n  }\r\n\r\n  /**\r\n   * Updates the projected DOM element\r\n   * @param {HTMLElement} domElement A DOM element to project\r\n   */\r\n  setDomElement(domElement) {\r\n    if (this.domElement.parentNode) {\r\n      this.domElement.parentNode.removeChild(this.domElement);\r\n    }\r\n\r\n    this.domElement = domElement;\r\n    this.cssObject.element = domElement;\r\n\r\n    this.resizeDomElement();\r\n  }\r\n\r\n  /**\r\n   * Updates the DOM element and its projection states\r\n   */\r\n  update() {\r\n    this.updateMatrixWorld();\r\n    const worldMatrix = this.matrixWorld;\r\n\r\n    worldMatrix.decompose(this.position, this.quaternion, this.scale);\r\n\r\n    this.cssObject.quaternion.copy(this.quaternion);\r\n    this.cssObject.position.copy(this.position).multiplyScalar(cssFactor);\r\n\r\n    const scaleFactor =\r\n      this.elementWidth / (this.geometry.parameters.width * this.scale.x);\r\n\r\n    this.cssObject.scale.multiplyScalar(cssFactor / scaleFactor);\r\n    this.cssObject.visible = this.visible;\r\n  }\r\n}\r\n\r\nexport default DOMElement;\r\n"],"names":["DOMContext","constructor","camera","this","enabled","cssRenderer","CSS3DRenderer","domElement","cssCamera","PerspectiveCamera","fov","aspect","near","far","cssScene","Scene","update","bind","setSize","width","height","updateProjectionMatrix","quaternion","copy","position","multiplyScalar","traverse","child","render","DOMElement","Mesh","context","options","elementWidth","super","PlaneGeometry","MeshBasicMaterial","opacity","color","blending","NoBlending","side","DoubleSide","aspectRatio","elementHeight","resizeDomElement","cssObject","CSS3DObject","scale","addEventListener","add","remove","style","setDomElement","parentNode","removeChild","element","updateMatrixWorld","matrixWorld","decompose","geometry","parameters","x","visible"],"mappings":"wOAOA,MAAMA,EAKJC,YAAYC,GACVC,KAAKC,SAAU,EAEfD,KAAKE,YAAc,IAAIC,EACvBH,KAAKI,WAAaJ,KAAKE,YAAYE,WAEnCJ,KAAKK,UAAY,IAAIC,EACnBP,EAAOQ,IACPR,EAAOS,OCjBY,IDkBnBT,EAAOU,KClBY,IDmBnBV,EAAOW,KAETV,KAAKD,OAASA,EAEdC,KAAKW,SAAW,IAAIC,EAEpBZ,KAAKa,OAASb,KAAKa,OAAOC,KAAKd,MAQjCe,QAAQC,EAAOC,GACbjB,KAAKE,YAAYa,QAAQC,EAAOC,GAChCjB,KAAKK,UAAUG,OAASQ,EAAQC,EAChCjB,KAAKK,UAAUa,yBAMjBL,SACEb,KAAKK,UAAUc,WAAWC,KAAKpB,KAAKD,OAAOoB,YAC3CnB,KAAKK,UAAUgB,SAASD,KAAKpB,KAAKD,OAAOsB,UAAUC,eC5C9B,KD8CjBtB,KAAKC,SACPD,KAAKW,SAASY,SAASC,IAChBA,EAAMX,QAEXW,EAAMX,WAIVb,KAAKE,YAAYuB,OAAOzB,KAAKW,SAAUX,KAAKK,YE3ChD,MAAMqB,UAAmBC,EAUvB7B,YACE8B,EACAxB,EACAyB,GAEA,MAAMC,aAAEA,EAAe,IAAjBd,MAAsBA,EAAQ,EAA9BC,OAAiCA,EAAS,KAASY,GAAW,GAUpEE,MARiB,IAAIC,EAAchB,EAAOC,GACzB,IAAIgB,EAAkB,CACrCC,QAAS,EACTC,MAAO,SACPC,SAAUC,EACVC,KAAMC,KAKRvC,KAAKI,WAAaA,EAClBJ,KAAKwC,YAAcvB,EAASD,EAC5BhB,KAAK8B,aAAeA,EACpB9B,KAAKyC,cAAgBzC,KAAK8B,aAAe9B,KAAKwC,YAC9CxC,KAAKgB,MAAQA,EACbhB,KAAKiB,OAASA,EAEdjB,KAAK0C,mBAEL1C,KAAK2C,UAAY,IAAIC,EAAY5C,KAAKI,YACtCJ,KAAK2C,UAAUE,MAAMvB,eDhDA,KCgD4BtB,KAAK8B,aAAe9B,KAAKgB,QAE1EhB,KAAK8C,iBAAiB,QAAS,IAAMlB,EAAQjB,SAASoC,IAAI/C,KAAK2C,YAC/D3C,KAAK8C,iBAAiB,UAAW,IAAMlB,EAAQjB,SAASqC,OAAOhD,KAAK2C,YAEpE3C,KAAKa,OAASb,KAAKa,OAAOC,KAAKd,MAMjC0C,mBACE1C,KAAKI,WAAW6C,MAAMjC,MAAS,GAAEhB,KAAK8B,iBACtC9B,KAAKI,WAAW6C,MAAMhC,OAAU,GAAEjB,KAAKyC,kBAOzCS,cAAc9C,GACRJ,KAAKI,WAAW+C,YAClBnD,KAAKI,WAAW+C,WAAWC,YAAYpD,KAAKI,YAG9CJ,KAAKI,WAAaA,EAClBJ,KAAK2C,UAAUU,QAAUjD,EAEzBJ,KAAK0C,mBAMP7B,SACEb,KAAKsD,oBACetD,KAAKuD,YAEbC,UAAUxD,KAAKqB,SAAUrB,KAAKmB,WAAYnB,KAAK6C,OAE3D7C,KAAK2C,UAAUxB,WAAWC,KAAKpB,KAAKmB,YACpCnB,KAAK2C,UAAUtB,SAASD,KAAKpB,KAAKqB,UAAUC,eDzFvB,KC8FrBtB,KAAK2C,UAAUE,MAAMvB,eD9FA,KC4FnBtB,KAAK8B,cAAgB9B,KAAKyD,SAASC,WAAW1C,MAAQhB,KAAK6C,MAAMc,KAGnE3D,KAAK2C,UAAUiB,QAAU5D,KAAK4D"}