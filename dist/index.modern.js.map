{"version":3,"file":"index.modern.js","sources":["../src/objects/DOMElement.ts","../src/constants.ts","../src/renderers/DOMContext.ts"],"sourcesContent":["import {\n  Mesh,\n  PlaneGeometry,\n  MeshBasicMaterial,\n  NoBlending,\n  DoubleSide,\n  Vector3,\n  Box3,\n} from 'three';\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMContext } from '../renderers/DOMContext';\nimport { cssFactor } from '../constants';\n\nexport class DOMElement extends Mesh {\n  /**\n   * The projected 2D DOM element\n   */\n  domElement: HTMLElement;\n  /**\n   * DOM element aspect artio\n   */\n  aspectRatio: number;\n  /**\n   * DOM element width\n   */\n  elementWidth: number;\n  /**\n   * DOM element height\n   */\n  elementHeight: number;\n  /**\n   * 3D projection width\n   */\n  width: number;\n  /**\n   * 3D projection height\n   */\n  height: number;\n  /**\n   * The projecting 3D object\n   */\n  cssObject: CSS3DObject;\n\n  /**\n   * DOM element that is projected into 3D space\n   * @param context A DOM context instance to draw on\n   * @param domElement A DOM element to project\n   * @param options DOM element options\n   * @param options.elementWidth DOM element width\n   * @param options.width 3D plane width\n   * @param options.height 3D plane height\n   */\n  constructor(\n    context: DOMContext,\n    domElement: HTMLElement,\n    { elementWidth = 768, width = 1, height = 0.75 } = {}\n  ) {\n    const geometry = new PlaneGeometry(width, height);\n    const material = new MeshBasicMaterial({\n      opacity: 0,\n      color: 0xffffff,\n      blending: NoBlending,\n      side: DoubleSide,\n    });\n\n    super(geometry, material);\n\n    this.domElement = domElement;\n    this.aspectRatio = height / width;\n    this.elementWidth = elementWidth;\n    this.elementHeight = this.elementWidth * this.aspectRatio;\n    this.width = width;\n    this.height = height;\n\n    this.resizeDomElement();\n\n    this.cssObject = new CSS3DObject(this.domElement);\n    this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\n\n    this.addEventListener('added', () => context.cssScene.add(this.cssObject));\n    this.addEventListener('removed', () => context.cssScene.remove(this.cssObject));\n\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Resizes DOM element to sync with projection\n   */\n  resizeDomElement() {\n    this.domElement.style.width = `${this.elementWidth}px`;\n    this.domElement.style.height = `${this.elementHeight}px`;\n  }\n\n  /**\n   * Updates the projected DOM element\n   * @param domElement A DOM element to project\n   */\n  setDomElement(domElement: HTMLElement) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    this.domElement = domElement;\n    this.cssObject.element = domElement;\n\n    this.resizeDomElement();\n  }\n\n  /**\n   * Updates the DOM element and its projection states\n   */\n  update() {\n    this.updateMatrixWorld();\n    const worldMatrix = this.matrixWorld;\n\n    worldMatrix.decompose(this.position, this.quaternion, this.scale);\n\n    this.cssObject.quaternion.copy(this.quaternion);\n    this.cssObject.position.copy(this.position).multiplyScalar(cssFactor);\n\n    const size = new Vector3();\n    new Box3().setFromObject(this).getSize(size);\n\n    const scaleFactor = this.elementWidth / (size.x * this.scale.x);\n\n    this.cssObject.scale.multiplyScalar(cssFactor / scaleFactor);\n    this.cssObject.visible = this.visible;\n  }\n}\n","/**\n * Useful for projecting to scale high-resolution DOM elements\n */\nexport const cssFactor = 100;\n","import { PerspectiveCamera, Scene } from 'three';\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMElement } from '../objects/DOMElement';\nimport { cssFactor } from '../constants';\n\nexport class DOMContext {\n  enabled: boolean;\n  cssRenderer: CSS3DRenderer;\n  domElement: HTMLElement;\n  cssCamera: PerspectiveCamera;\n  camera: PerspectiveCamera;\n  cssScene: Scene;\n\n  /**\n   * DOM context instance\n   * @param camera  A perspective camera instance to draw from\n   */\n  constructor(camera: PerspectiveCamera) {\n    this.enabled = true;\n\n    this.cssRenderer = new CSS3DRenderer();\n    this.domElement = this.cssRenderer.domElement;\n\n    this.cssCamera = new PerspectiveCamera(\n      camera.fov,\n      camera.aspect,\n      camera.near * cssFactor,\n      camera.far * cssFactor\n    );\n    this.camera = camera;\n\n    this.cssScene = new Scene();\n\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Resizes the DOM context's renderer and camera\n   * @param width Target width\n   * @param height Target height\n   */\n  setSize(width: number, height: number) {\n    this.cssRenderer.setSize(width, height);\n    this.cssCamera.aspect = width / height;\n    this.cssCamera.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the DOM context's renderer and camera states\n   */\n  update() {\n    this.cssCamera.quaternion.copy(this.camera.quaternion);\n    this.cssCamera.position.copy(this.camera.position).multiplyScalar(cssFactor);\n\n    if (this.enabled) {\n      this.cssScene.traverse(child => {\n        const element = child as DOMElement;\n\n        if (!element.update) return;\n\n        element.update();\n      });\n    }\n\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\n  }\n}\n"],"names":["DOMElement","Mesh","constructor","context","domElement","elementWidth","width","height","super","PlaneGeometry","MeshBasicMaterial","opacity","color","blending","NoBlending","side","DoubleSide","this","aspectRatio","elementHeight","resizeDomElement","cssObject","CSS3DObject","scale","multiplyScalar","addEventListener","cssScene","add","remove","update","bind","style","setDomElement","parentNode","removeChild","element","updateMatrixWorld","matrixWorld","decompose","position","quaternion","copy","size","Vector3","Box3","setFromObject","getSize","x","visible","DOMContext","camera","enabled","cssRenderer","CSS3DRenderer","cssCamera","PerspectiveCamera","fov","aspect","near","far","Scene","setSize","updateProjectionMatrix","traverse","child","render"],"mappings":"kQAaaA,UAAmBC,EAuC9BC,YACEC,EACAC,GACAC,aAAEA,EAAe,IAAjBC,MAAsBA,EAAQ,EAA9BC,OAAiCA,EAAS,KAAS,IAUnDC,MARiB,IAAIC,EAAcH,EAAOC,GACzB,IAAIG,EAAkB,CACrCC,QAAS,EACTC,MAAO,SACPC,SAAUC,EACVC,KAAMC,KAKRC,KAAKb,WAAaA,EAClBa,KAAKC,YAAcX,EAASD,EAC5BW,KAAKZ,aAAeA,EACpBY,KAAKE,cAAgBF,KAAKZ,aAAeY,KAAKC,YAC9CD,KAAKX,MAAQA,EACbW,KAAKV,OAASA,EAEdU,KAAKG,mBAELH,KAAKI,UAAY,IAAIC,EAAYL,KAAKb,YACtCa,KAAKI,UAAUE,MAAMC,eC1EA,KD0E4BP,KAAKZ,aAAeY,KAAKX,QAE1EW,KAAKQ,iBAAiB,QAAS,IAAMtB,EAAQuB,SAASC,IAAIV,KAAKI,YAC/DJ,KAAKQ,iBAAiB,UAAW,IAAMtB,EAAQuB,SAASE,OAAOX,KAAKI,YAEpEJ,KAAKY,OAASZ,KAAKY,OAAOC,KAAKb,MAMjCG,mBACEH,KAAKb,WAAW2B,MAAMzB,SAAWW,KAAKZ,iBACtCY,KAAKb,WAAW2B,MAAMxB,UAAYU,KAAKE,kBAOzCa,cAAc5B,GACRa,KAAKb,WAAW6B,YAClBhB,KAAKb,WAAW6B,WAAWC,YAAYjB,KAAKb,YAG9Ca,KAAKb,WAAaA,EAClBa,KAAKI,UAAUc,QAAU/B,EAEzBa,KAAKG,mBAMPS,SACEZ,KAAKmB,oBACenB,KAAKoB,YAEbC,UAAUrB,KAAKsB,SAAUtB,KAAKuB,WAAYvB,KAAKM,OAE3DN,KAAKI,UAAUmB,WAAWC,KAAKxB,KAAKuB,YACpCvB,KAAKI,UAAUkB,SAASE,KAAKxB,KAAKsB,UAAUf,eCnHvB,KDqHrB,MAAMkB,EAAO,IAAIC,GACjB,IAAIC,GAAOC,cAAc5B,MAAM6B,QAAQJ,GAIvCzB,KAAKI,UAAUE,MAAMC,eC1HA,KDwHDP,KAAKZ,cAAgBqC,EAAKK,EAAI9B,KAAKM,MAAMwB,KAG7D9B,KAAKI,UAAU2B,QAAU/B,KAAK+B,eEzHrBC,EAYX/C,YAAYgD,GACVjC,KAAKkC,SAAU,EAEflC,KAAKmC,YAAc,IAAIC,EACvBpC,KAAKb,WAAaa,KAAKmC,YAAYhD,WAEnCa,KAAKqC,UAAY,IAAIC,EACnBL,EAAOM,IACPN,EAAOO,ODtBY,ICuBnBP,EAAOQ,KDvBY,ICwBnBR,EAAOS,KAET1C,KAAKiC,OAASA,EAEdjC,KAAKS,SAAW,IAAIkC,EAEpB3C,KAAKY,OAASZ,KAAKY,OAAOC,KAAKb,MAQjC4C,QAAQvD,EAAeC,GACrBU,KAAKmC,YAAYS,QAAQvD,EAAOC,GAChCU,KAAKqC,UAAUG,OAASnD,EAAQC,EAChCU,KAAKqC,UAAUQ,yBAMjBjC,SACEZ,KAAKqC,UAAUd,WAAWC,KAAKxB,KAAKiC,OAAOV,YAC3CvB,KAAKqC,UAAUf,SAASE,KAAKxB,KAAKiC,OAAOX,UAAUf,eDjD9B,KCmDjBP,KAAKkC,SACPlC,KAAKS,SAASqC,SAASC,IACLA,EAEHnC,QAFGmC,EAIRnC,WAIZZ,KAAKmC,YAAYa,OAAOhD,KAAKS,SAAUT,KAAKqC"}