{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import {\n  PerspectiveCamera,\n  Scene,\n  MeshBasicMaterial,\n  NoBlending,\n  DoubleSide,\n  PlaneGeometry,\n  Mesh,\n  Vector3,\n  Quaternion,\n} from 'three';\nimport { CSS3DRenderer, CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer.js';\n\nconst cssFactor = 100;\n\nclass DOMContext {\n  constructor(camera) {\n    this.enabled = true;\n\n    this.cssRenderer = new CSS3DRenderer();\n    this.domElement = this.cssRenderer.domElement;\n\n    this.cssCamera = new PerspectiveCamera(\n      camera.fov,\n      camera.aspect,\n      camera.near * cssFactor,\n      camera.far * cssFactor\n    );\n    this.camera = camera;\n\n    this.cssScene = new Scene();\n\n    this.update = this.update.bind(this);\n  }\n\n  setSize(width, height) {\n    this.cssRenderer.setSize(width, height);\n    this.cssCamera.aspect = width / height;\n    this.cssCamera.updateProjectionMatrix();\n  }\n\n  update() {\n    this.cssCamera.quaternion.copy(this.camera.quaternion);\n    this.cssCamera.position.copy(this.camera.position).multiplyScalar(cssFactor);\n\n    if (this.enabled) {\n      this.cssScene.traverse(child => {\n        if (!child.update) return;\n\n        child.update();\n      });\n    }\n\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\n  }\n}\n\nclass DOMElement extends Mesh {\n  constructor(\n    context,\n    domElement,\n    { elementWidth = 768, width = 1, height = 0.75 } = {}\n  ) {\n    const geometry = new PlaneGeometry(width, height);\n    const material = new MeshBasicMaterial({\n      opacity: 0,\n      color: 0xffffff,\n      blending: NoBlending,\n      side: DoubleSide,\n    });\n\n    super(geometry, material);\n\n    this.domElement = domElement;\n    this.aspectRatio = height / width;\n    this.elementWidth = elementWidth;\n    this.elementHeight = this.elementWidth * this.aspectRatio;\n    this.width = width;\n    this.height = height;\n\n    this.resizeDomElement();\n\n    this.cssObject = new CSS3DObject(this.domElement);\n    this.cssObject.scale\n      .multiplyScalar(cssFactor / (this.elementWidth / this.width));\n\n    this.addEventListener('added', () => context.cssScene.add(this.cssObject));\n    this.addEventListener('removed', () => context.cssScene.remove(this.cssObject));\n\n    this.update = this.update.bind(this);\n  }\n\n  resizeDomElement() {\n    this.domElement.style.width = `${this.elementWidth}px`;\n    this.domElement.style.height = `${this.elementHeight}px`;\n  }\n\n  setDomElement(domElement) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    this.domElement = domElement;\n    this.cssObject.element = domElement;\n\n    this.resizeDomElement();\n  }\n\n  update() {\n    this.updateMatrixWorld();\n    const worldMatrix = this.matrixWorld;\n\n    const position = new Vector3();\n    const scale = new Vector3();\n    const quaternion = new Quaternion();\n    worldMatrix.decompose(position, quaternion, scale);\n\n    this.cssObject.quaternion.copy(quaternion);\n    this.cssObject.position.copy(position).multiplyScalar(cssFactor);\n\n    const scaleFactor =\n      this.elementWidth / (this.geometry.parameters.width * scale.x);\n\n    this.cssObject.scale.multiplyScalar(cssFactor / scaleFactor);\n  }\n}\n\nexport { DOMContext, DOMElement };\n"],"names":["DOMContext","constructor","camera","this","enabled","cssRenderer","CSS3DRenderer","domElement","cssCamera","PerspectiveCamera","fov","aspect","near","far","cssScene","Scene","update","bind","setSize","width","height","updateProjectionMatrix","quaternion","copy","position","multiplyScalar","traverse","child","render","DOMElement","Mesh","context","elementWidth","super","PlaneGeometry","MeshBasicMaterial","opacity","color","blending","NoBlending","side","DoubleSide","aspectRatio","elementHeight","resizeDomElement","cssObject","CSS3DObject","scale","addEventListener","add","remove","style","setDomElement","parentNode","removeChild","element","updateMatrixWorld","worldMatrix","matrixWorld","Vector3","Quaternion","decompose","geometry","parameters","x"],"mappings":"qQAeA,MAAMA,EACJC,YAAYC,GACVC,KAAKC,SAAU,EAEfD,KAAKE,YAAc,IAAIC,EACvBH,KAAKI,WAAaJ,KAAKE,YAAYE,WAEnCJ,KAAKK,UAAY,IAAIC,EACnBP,EAAOQ,IACPR,EAAOS,OAXK,IAYZT,EAAOU,KAZK,IAaZV,EAAOW,KAETV,KAAKD,OAASA,EAEdC,KAAKW,SAAW,IAAIC,EAEpBZ,KAAKa,OAASb,KAAKa,OAAOC,KAAKd,MAGjCe,QAAQC,EAAOC,GACbjB,KAAKE,YAAYa,QAAQC,EAAOC,GAChCjB,KAAKK,UAAUG,OAASQ,EAAQC,EAChCjB,KAAKK,UAAUa,yBAGjBL,SACEb,KAAKK,UAAUc,WAAWC,KAAKpB,KAAKD,OAAOoB,YAC3CnB,KAAKK,UAAUgB,SAASD,KAAKpB,KAAKD,OAAOsB,UAAUC,eA9BrC,KAgCVtB,KAAKC,SACPD,KAAKW,SAASY,SAASC,IAChBA,EAAMX,QAEXW,EAAMX,WAIVb,KAAKE,YAAYuB,OAAOzB,KAAKW,SAAUX,KAAKK,YAIhD,MAAMqB,UAAmBC,EACvB7B,YACE8B,EACAxB,GACAyB,aAAEA,EAAe,IAAjBb,MAAsBA,EAAQ,EAA9BC,OAAiCA,EAAS,KAAS,IAUnDa,MARiB,IAAIC,EAAcf,EAAOC,GACzB,IAAIe,EAAkB,CACrCC,QAAS,EACTC,MAAO,SACPC,SAAUC,EACVC,KAAMC,KAKRtC,KAAKI,WAAaA,EAClBJ,KAAKuC,YAActB,EAASD,EAC5BhB,KAAK6B,aAAeA,EACpB7B,KAAKwC,cAAgBxC,KAAK6B,aAAe7B,KAAKuC,YAC9CvC,KAAKgB,MAAQA,EACbhB,KAAKiB,OAASA,EAEdjB,KAAKyC,mBAELzC,KAAK0C,UAAY,IAAIC,EAAY3C,KAAKI,YACtCJ,KAAK0C,UAAUE,MACZtB,eAvEW,KAuEiBtB,KAAK6B,aAAe7B,KAAKgB,QAExDhB,KAAK6C,iBAAiB,QAAS,IAAMjB,EAAQjB,SAASmC,IAAI9C,KAAK0C,YAC/D1C,KAAK6C,iBAAiB,UAAW,IAAMjB,EAAQjB,SAASoC,OAAO/C,KAAK0C,YAEpE1C,KAAKa,OAASb,KAAKa,OAAOC,KAAKd,MAGjCyC,mBACEzC,KAAKI,WAAW4C,MAAMhC,MAAWhB,KAAK6B,aAAP,KAC/B7B,KAAKI,WAAW4C,MAAM/B,OAAYjB,KAAKwC,cAAP,KAGlCS,cAAc7C,GACRJ,KAAKI,WAAW8C,YAClBlD,KAAKI,WAAW8C,WAAWC,YAAYnD,KAAKI,YAG9CJ,KAAKI,WAAaA,EAClBJ,KAAK0C,UAAUU,QAAUhD,EAEzBJ,KAAKyC,mBAGP5B,SACEb,KAAKqD,oBACL,MAAMC,EAActD,KAAKuD,YAEnBlC,EAAW,IAAImC,EACfZ,EAAQ,IAAIY,EACZrC,EAAa,IAAIsC,EACvBH,EAAYI,UAAUrC,EAAUF,EAAYyB,GAE5C5C,KAAK0C,UAAUvB,WAAWC,KAAKD,GAC/BnB,KAAK0C,UAAUrB,SAASD,KAAKC,GAAUC,eAzGzB,KA8GdtB,KAAK0C,UAAUE,MAAMtB,eA9GP,KA4GZtB,KAAK6B,cAAgB7B,KAAK2D,SAASC,WAAW5C,MAAQ4B,EAAMiB"}