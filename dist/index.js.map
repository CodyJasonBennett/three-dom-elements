{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/objects/DOMElement.ts","../src/renderers/DOMContext.ts"],"sourcesContent":["/**\n * Useful for projecting to scale high-resolution DOM elements\n */\nexport const cssFactor = 100;\n","import {\n  Mesh,\n  PlaneGeometry,\n  MeshBasicMaterial,\n  NoBlending,\n  DoubleSide,\n  Vector3,\n  Box3,\n} from 'three';\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMContext } from '../renderers/DOMContext';\nimport { cssFactor } from '../constants';\n\nexport class DOMElement extends Mesh {\n  /**\n   * The active `DOMContext` to draw on\n   */\n  context: DOMContext;\n  /**\n   * The projected 2D DOM element\n   */\n  domElement: HTMLElement;\n  /**\n   * DOM element aspect artio\n   */\n  aspectRatio: number;\n  /**\n   * DOM element width\n   */\n  elementWidth: number;\n  /**\n   * DOM element height\n   */\n  elementHeight: number;\n  /**\n   * 3D projection width\n   */\n  width: number;\n  /**\n   * 3D projection height\n   */\n  height: number;\n  /**\n   * The projecting 3D object\n   */\n  cssObject: CSS3DObject;\n  /**\n   * Internal `Vector3` for WebGL size/scale calculations\n   */\n  size: Vector3;\n  /**\n   * Internal `Box` used for bounding box calculations\n   */\n  box: Box3;\n\n  /**\n   * DOM element that is projected into 3D space\n   * @param context A DOM context instance to draw on\n   * @param domElement A DOM element to project\n   * @param options DOM element options\n   * @param options.elementWidth DOM element width\n   * @param options.width 3D plane width\n   * @param options.height 3D plane height\n   */\n  constructor(\n    context: DOMContext,\n    domElement: HTMLElement,\n    { elementWidth = 768, width = 1, height = 0.75 } = {}\n  ) {\n    // Create portal mesh\n    const geometry = new PlaneGeometry(width, height);\n    const material = new MeshBasicMaterial({\n      opacity: 0,\n      blending: NoBlending,\n      side: DoubleSide,\n    });\n    super(geometry, material);\n\n    // Expose params\n    this.context = context;\n    this.domElement = domElement;\n    this.aspectRatio = height / width;\n    this.elementWidth = elementWidth;\n    this.elementHeight = this.elementWidth * this.aspectRatio;\n    this.width = width;\n    this.height = height;\n\n    // Set initial size\n    this.resizeElement();\n\n    // Init 3D DOM\n    this.cssObject = new CSS3DObject(this.domElement);\n    this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\n\n    // Init helpers\n    this.size = new Vector3();\n    this.box = new Box3();\n\n    // Init events\n    this.addEventListener('added', this.handleAdded);\n    this.addEventListener('removed', this.handleRemoved);\n\n    // Bind update\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Adds the current cssObject to the scene\n   */\n  handleAdded() {\n    this.context.cssScene.add(this.cssObject);\n  }\n\n  /**\n   * Removes the current cssObject from the scene\n   */\n  handleRemoved() {\n    this.context.cssScene.remove(this.cssObject);\n  }\n\n  /**\n   * Resizes DOM element to sync with projection\n   */\n  resizeElement() {\n    this.domElement.style.width = `${this.elementWidth}px`;\n    this.domElement.style.height = `${this.elementHeight}px`;\n  }\n\n  /**\n   * Updates the projected DOM element\n   * @param domElement A DOM element to project\n   */\n  setElement(domElement: HTMLElement) {\n    // Cleanup previous element\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    // Set new element\n    this.domElement = domElement;\n    this.cssObject.element = domElement;\n\n    // Reset element size\n    this.resizeElement();\n  }\n\n  /**\n   * Updates the DOM element and its projection states\n   */\n  update() {\n    // Get global transform\n    this.updateMatrixWorld();\n    const worldMatrix = this.matrixWorld;\n    worldMatrix.decompose(this.position, this.quaternion, this.scale);\n\n    // Sync CSS properties with WebGL mesh\n    this.cssObject.quaternion.copy(this.quaternion);\n    this.cssObject.position.copy(this.position).multiplyScalar(cssFactor);\n\n    // Calculate CSS scale factor\n    this.box.setFromObject(this).getSize(this.size);\n    const scaleFactor = this.elementWidth / (this.size.x * this.scale.x);\n\n    // Sync CSS scale with WebGL projection\n    this.cssObject.scale.multiplyScalar(cssFactor / scaleFactor);\n    this.cssObject.visible = this.visible;\n  }\n\n  /**\n   * Disposes WebGL and DOM elements\n   */\n  dispose() {\n    // Cleanup events\n    this.removeEventListener('added', this.handleAdded);\n    this.removeEventListener('removed', this.handleRemoved);\n\n    // Cleanup DOM\n    this.domElement.remove();\n\n    // Cleanup WebGL\n    this.geometry.dispose();\n    (this.material as MeshBasicMaterial).dispose();\n  }\n}\n","import { PerspectiveCamera, Scene } from 'three';\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMElement } from '../objects/DOMElement';\nimport { cssFactor } from '../constants';\n\nexport class DOMContext {\n  /**\n   * Whether to enable the `DOMContext` and its projection. Default is `true.`\n   */\n  enabled: boolean;\n  /**\n   * Renderer used for rendering the DOM\n   */\n  cssRenderer: CSS3DRenderer;\n  /**\n   * Target DOM element to render to\n   */\n  domElement: HTMLElement;\n  /**\n   * Camera used for CSS projection\n   */\n  cssCamera: PerspectiveCamera;\n  /**\n   * Parent camera used to sync with WebGL\n   */\n  camera: PerspectiveCamera;\n  /**\n   * CSS scene used to contain CSS projections\n   */\n  cssScene: Scene;\n\n  /**\n   * DOM context instance\n   * @param camera  A perspective camera instance to draw from\n   */\n  constructor(camera: PerspectiveCamera) {\n    // Set default settings\n    this.enabled = true;\n\n    // Init renderer\n    this.cssRenderer = new CSS3DRenderer();\n    this.domElement = this.cssRenderer.domElement;\n\n    // Init camera\n    this.cssCamera = new PerspectiveCamera(\n      camera.fov,\n      camera.aspect,\n      camera.near * cssFactor,\n      camera.far * cssFactor\n    );\n    this.camera = camera;\n\n    // Init scene\n    this.cssScene = new Scene();\n\n    // Bind update\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Resizes the DOM context's renderer and camera\n   * @param width Target width\n   * @param height Target height\n   */\n  setSize(width: number, height: number) {\n    this.cssRenderer.setSize(width, height);\n    this.cssCamera.aspect = width / height;\n    this.cssCamera.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the DOM context's renderer and camera states\n   */\n  update() {\n    // Sync CSS camera with WebGL camera\n    this.cssCamera.quaternion.copy(this.camera.quaternion);\n    this.cssCamera.position.copy(this.camera.position).multiplyScalar(cssFactor);\n\n    // Update descendants\n    if (this.enabled) {\n      this.cssScene.traverse(child => {\n        const element = child as DOMElement;\n\n        if (!element.update) return;\n\n        element.update();\n      });\n    }\n\n    // Render projection\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\n  }\n}\n"],"names":["cssFactor","DOMElement","context","domElement","elementWidth","width","height","geometry","PlaneGeometry","material","MeshBasicMaterial","opacity","blending","NoBlending","side","DoubleSide","_this","aspectRatio","elementHeight","resizeElement","cssObject","CSS3DObject","scale","multiplyScalar","size","Vector3","box","Box3","addEventListener","handleAdded","handleRemoved","update","bind","this","cssScene","add","remove","style","setElement","parentNode","removeChild","element","updateMatrixWorld","matrixWorld","decompose","position","quaternion","copy","setFromObject","getSize","x","visible","dispose","removeEventListener","Mesh","camera","enabled","cssRenderer","CSS3DRenderer","cssCamera","PerspectiveCamera","fov","aspect","near","far","Scene","setSize","updateProjectionMatrix","traverse","child","render"],"mappings":"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"}