{"version":3,"file":"index.js","sources":["../src/objects/DOMElement.ts","../src/constants.ts","../src/renderers/DOMContext.ts"],"sourcesContent":["import {\n  Mesh,\n  PlaneGeometry,\n  MeshBasicMaterial,\n  NoBlending,\n  DoubleSide,\n  Vector3,\n  Box3,\n} from 'three';\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMContext } from '../renderers/DOMContext';\nimport { cssFactor } from '../constants';\n\nexport class DOMElement extends Mesh {\n  /**\n   * The projected 2D DOM element\n   */\n  domElement: HTMLElement;\n  /**\n   * DOM element aspect artio\n   */\n  aspectRatio: number;\n  /**\n   * DOM element width\n   */\n  elementWidth: number;\n  /**\n   * DOM element height\n   */\n  elementHeight: number;\n  /**\n   * 3D projection width\n   */\n  width: number;\n  /**\n   * 3D projection height\n   */\n  height: number;\n  /**\n   * The projecting 3D object\n   */\n  cssObject: CSS3DObject;\n\n  /**\n   * DOM element that is projected into 3D space\n   * @param context A DOM context instance to draw on\n   * @param domElement A DOM element to project\n   * @param options DOM element options\n   * @param options.elementWidth DOM element width\n   * @param options.width 3D plane width\n   * @param options.height 3D plane height\n   */\n  constructor(\n    context: DOMContext,\n    domElement: HTMLElement,\n    { elementWidth = 768, width = 1, height = 0.75 } = {}\n  ) {\n    const geometry = new PlaneGeometry(width, height);\n    const material = new MeshBasicMaterial({\n      opacity: 0,\n      color: 0xffffff,\n      blending: NoBlending,\n      side: DoubleSide,\n    });\n\n    super(geometry, material);\n\n    this.domElement = domElement;\n    this.aspectRatio = height / width;\n    this.elementWidth = elementWidth;\n    this.elementHeight = this.elementWidth * this.aspectRatio;\n    this.width = width;\n    this.height = height;\n\n    this.resizeDomElement();\n\n    this.cssObject = new CSS3DObject(this.domElement);\n    this.cssObject.scale.multiplyScalar(cssFactor / (this.elementWidth / this.width));\n\n    this.addEventListener('added', () => context.cssScene.add(this.cssObject));\n    this.addEventListener('removed', () => context.cssScene.remove(this.cssObject));\n\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Resizes DOM element to sync with projection\n   */\n  resizeDomElement() {\n    this.domElement.style.width = `${this.elementWidth}px`;\n    this.domElement.style.height = `${this.elementHeight}px`;\n  }\n\n  /**\n   * Updates the projected DOM element\n   * @param domElement A DOM element to project\n   */\n  setDomElement(domElement: HTMLElement) {\n    if (this.domElement.parentNode) {\n      this.domElement.parentNode.removeChild(this.domElement);\n    }\n\n    this.domElement = domElement;\n    this.cssObject.element = domElement;\n\n    this.resizeDomElement();\n  }\n\n  /**\n   * Updates the DOM element and its projection states\n   */\n  update() {\n    this.updateMatrixWorld();\n    const worldMatrix = this.matrixWorld;\n\n    worldMatrix.decompose(this.position, this.quaternion, this.scale);\n\n    this.cssObject.quaternion.copy(this.quaternion);\n    this.cssObject.position.copy(this.position).multiplyScalar(cssFactor);\n\n    const size = new Vector3();\n    new Box3().setFromObject(this).getSize(size);\n\n    const scaleFactor = this.elementWidth / (size.x * this.scale.x);\n\n    this.cssObject.scale.multiplyScalar(cssFactor / scaleFactor);\n    this.cssObject.visible = this.visible;\n  }\n}\n","/**\n * Useful for projecting to scale high-resolution DOM elements\n */\nexport const cssFactor = 100;\n","import { PerspectiveCamera, Scene } from 'three';\nimport { CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { DOMElement } from '../objects/DOMElement';\nimport { cssFactor } from '../constants';\n\nexport class DOMContext {\n  enabled: boolean;\n  cssRenderer: CSS3DRenderer;\n  domElement: HTMLElement;\n  cssCamera: PerspectiveCamera;\n  camera: PerspectiveCamera;\n  cssScene: Scene;\n\n  /**\n   * DOM context instance\n   * @param camera  A perspective camera instance to draw from\n   */\n  constructor(camera: PerspectiveCamera) {\n    this.enabled = true;\n\n    this.cssRenderer = new CSS3DRenderer();\n    this.domElement = this.cssRenderer.domElement;\n\n    this.cssCamera = new PerspectiveCamera(\n      camera.fov,\n      camera.aspect,\n      camera.near * cssFactor,\n      camera.far * cssFactor\n    );\n    this.camera = camera;\n\n    this.cssScene = new Scene();\n\n    this.update = this.update.bind(this);\n  }\n\n  /**\n   * Resizes the DOM context's renderer and camera\n   * @param width Target width\n   * @param height Target height\n   */\n  setSize(width: number, height: number) {\n    this.cssRenderer.setSize(width, height);\n    this.cssCamera.aspect = width / height;\n    this.cssCamera.updateProjectionMatrix();\n  }\n\n  /**\n   * Updates the DOM context's renderer and camera states\n   */\n  update() {\n    this.cssCamera.quaternion.copy(this.camera.quaternion);\n    this.cssCamera.position.copy(this.camera.position).multiplyScalar(cssFactor);\n\n    if (this.enabled) {\n      this.cssScene.traverse(child => {\n        const element = child as DOMElement;\n\n        if (!element.update) return;\n\n        element.update();\n      });\n    }\n\n    this.cssRenderer.render(this.cssScene, this.cssCamera);\n  }\n}\n"],"names":["DOMElement","context","domElement","elementWidth","width","height","geometry","PlaneGeometry","material","MeshBasicMaterial","opacity","color","blending","NoBlending","side","DoubleSide","_this","aspectRatio","elementHeight","resizeDomElement","cssObject","CSS3DObject","scale","multiplyScalar","addEventListener","cssScene","add","remove","update","bind","this","style","setDomElement","parentNode","removeChild","element","updateMatrixWorld","matrixWorld","decompose","position","quaternion","copy","size","Vector3","Box3","setFromObject","getSize","x","visible","Mesh","camera","enabled","cssRenderer","CSS3DRenderer","cssCamera","PerspectiveCamera","fov","aspect","near","far","Scene","setSize","updateProjectionMatrix","traverse","child","render"],"mappings":"+KAaaA,sBAuCX,WACEC,EACAC,wBACmD,SAAjDC,aAAAA,aAAe,UAAKC,MAAAA,aAAQ,QAAGC,OAAAA,aAAS,MAEpCC,EAAW,IAAIC,gBAAcH,EAAOC,GACpCG,EAAW,IAAIC,oBAAkB,CACrCC,QAAS,EACTC,MAAO,SACPC,SAAUC,aACVC,KAAMC,sBAGRC,cAAMV,EAAUE,UAEXN,WAAaA,EAClBc,EAAKC,YAAcZ,EAASD,EAC5BY,EAAKb,aAAeA,EACpBa,EAAKE,cAAgBF,EAAKb,aAAea,EAAKC,YAC9CD,EAAKZ,MAAQA,EACbY,EAAKX,OAASA,EAEdW,EAAKG,mBAELH,EAAKI,UAAY,IAAIC,cAAYL,EAAKd,YACtCc,EAAKI,UAAUE,MAAMC,eC1EA,KD0E4BP,EAAKb,aAAea,EAAKZ,QAE1EY,EAAKQ,iBAAiB,QAAS,kBAAMvB,EAAQwB,SAASC,IAAIV,EAAKI,aAC/DJ,EAAKQ,iBAAiB,UAAW,kBAAMvB,EAAQwB,SAASE,OAAOX,EAAKI,aAEpEJ,EAAKY,OAASZ,EAAKY,OAAOC,qNArE9B,2BA2EEV,iBAAA,WACEW,KAAK5B,WAAW6B,MAAM3B,MAAW0B,KAAK3B,kBACtC2B,KAAK5B,WAAW6B,MAAM1B,OAAYyB,KAAKZ,sBAOzCc,cAAA,SAAc9B,GACR4B,KAAK5B,WAAW+B,YAClBH,KAAK5B,WAAW+B,WAAWC,YAAYJ,KAAK5B,YAG9C4B,KAAK5B,WAAaA,EAClB4B,KAAKV,UAAUe,QAAUjC,EAEzB4B,KAAKX,sBAMPS,OAAA,WACEE,KAAKM,oBACeN,KAAKO,YAEbC,UAAUR,KAAKS,SAAUT,KAAKU,WAAYV,KAAKR,OAE3DQ,KAAKV,UAAUoB,WAAWC,KAAKX,KAAKU,YACpCV,KAAKV,UAAUmB,SAASE,KAAKX,KAAKS,UAAUhB,eCnHvB,KDqHrB,IAAMmB,EAAO,IAAIC,WACjB,IAAIC,QAAOC,cAAcf,MAAMgB,QAAQJ,GAIvCZ,KAAKV,UAAUE,MAAMC,eC1HA,KDwHDO,KAAK3B,cAAgBuC,EAAKK,EAAIjB,KAAKR,MAAMyB,KAG7DjB,KAAKV,UAAU4B,QAAUlB,KAAKkB,YAjHFC,sCEI9B,WAAYC,GACVpB,KAAKqB,SAAU,EAEfrB,KAAKsB,YAAc,IAAIC,gBACvBvB,KAAK5B,WAAa4B,KAAKsB,YAAYlD,WAEnC4B,KAAKwB,UAAY,IAAIC,oBACnBL,EAAOM,IACPN,EAAOO,ODtBY,ICuBnBP,EAAOQ,KDvBY,ICwBnBR,EAAOS,KAET7B,KAAKoB,OAASA,EAEdpB,KAAKL,SAAW,IAAImC,QAEpB9B,KAAKF,OAASE,KAAKF,OAAOC,KAAKC,MA5BnC,2BAoCE+B,QAAA,SAAQzD,EAAeC,GACrByB,KAAKsB,YAAYS,QAAQzD,EAAOC,GAChCyB,KAAKwB,UAAUG,OAASrD,EAAQC,EAChCyB,KAAKwB,UAAUQ,4BAMjBlC,OAAA,WACEE,KAAKwB,UAAUd,WAAWC,KAAKX,KAAKoB,OAAOV,YAC3CV,KAAKwB,UAAUf,SAASE,KAAKX,KAAKoB,OAAOX,UAAUhB,eDjD9B,KCmDjBO,KAAKqB,SACPrB,KAAKL,SAASsC,SAAS,SAAAC,GACLA,EAEHpC,QAFGoC,EAIRpC,WAIZE,KAAKsB,YAAYa,OAAOnC,KAAKL,SAAUK,KAAKwB"}